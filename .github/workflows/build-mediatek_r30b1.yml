# 修订版: 修正了无效的 cron、条件表达式、checkout/action 版本、若干未定义变量的调用、权限声明等。
#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: build-mediatek_r30b1

permissions:
  contents: write

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
   - cron: '0 18 * * 4'
   # 分,时,日,月,周。示例：每周四 20:00 (UTC) 执行一次

env:
  FREE_DISK_SH: scripts/free_disk_space.sh
  ENV_SH: scripts/environment.sh
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  PLATFORM_FILE: configs/filogic.txt
  CONFIG_FILE: configs/packages-L.txt
  #CONFIG_5G: configs/packages-5G.txt
  SETTINGS_SH: scripts/init-settings.sh
  PACKAGES_SH: scripts/packages.sh
  #INSTALL5G_SH: scripts/install-5G.sh
  CLASH_CORE_SH: scripts/preset-clash-core-arm64-L.sh
  #ADDMOUNT_SH: scripts/add_automount.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查
      uses: actions/checkout@v4

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        chmod +x $FREE_DISK_SH && $FREE_DISK_SH
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        chmod +x $ENV_SH && $ENV_SH
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo timedatectl set-timezone "$TZ"
        docker image prune -a -f || true
        docker container prune -f || true
        sudo mkdir -p /workdir
        # 使用当前 runner 用户作为所属组更可靠
        sudo chown "$USER:$USER" /workdir

    - name: 检查空间使用情况1
      if: ${{ !cancelled() }}
      run: df -hT

    - name: 克隆源码
      working-directory: /workdir
      run: |
        git clone $REPO_URL --depth 1 -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 开启缓存
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: 'filogic'
        prefix: ${{ github.workspace }}/openwrt

    - name: 安装 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 导入补丁和配置 & 执行脚本
      run: |
        [ -d files ] && mv files openwrt/files || echo "files not found"
        [ -f $PLATFORM_FILE ] && cat $PLATFORM_FILE >> openwrt/.config
        [ -f $CONFIG_FILE ] && cat $CONFIG_FILE >> openwrt/.config
        cd openwrt
        # 有些脚本是可选的：先检测文件存在再执行，避免空变量导致的错误
        if [ -n "$GITHUB_WORKSPACE/$INSTALL5G_SH" ] && [ -f "$GITHUB_WORKSPACE/$INSTALL5G_SH" ]; then
          chmod +x "$GITHUB_WORKSPACE/$INSTALL5G_SH" && "$GITHUB_WORKSPACE/$INSTALL5G_SH"
        fi
        if [ -f "$GITHUB_WORKSPACE/$SETTINGS_SH" ]; then
          chmod +x "$GITHUB_WORKSPACE/$SETTINGS_SH" && "$GITHUB_WORKSPACE/$SETTINGS_SH"
        fi
        if [ -f "$GITHUB_WORKSPACE/$PACKAGES_SH" ]; then
          chmod +x "$GITHUB_WORKSPACE/$PACKAGES_SH" && "$GITHUB_WORKSPACE/$PACKAGES_SH"
        fi
        if [ -f "$GITHUB_WORKSPACE/$CLASH_CORE_SH" ]; then
          chmod +x "$GITHUB_WORKSPACE/$CLASH_CORE_SH" && "$GITHUB_WORKSPACE/$CLASH_CORE_SH"
        fi
        if [ -f "$GITHUB_WORKSPACE/$ADDMOUNT_SH" ]; then
          chmod +x "$GITHUB_WORKSPACE/$ADDMOUNT_SH" && "$GITHUB_WORKSPACE/$ADDMOUNT_SH"
        fi
        cp $GITHUB_WORKSPACE/r30b1/* target/linux/mediatek/dts
        cp "$GITHUB_WORKSPACE/r30b1/r30b1.dts" target/linux/mediatek/dts/mt7981b-cmcc-rax3000m.dts
        chmod +x target/linux/mediatek/dts/mt7981b-cmcc-rax3000m.dts
        cp "$GITHUB_WORKSPACE/r30b1/r30b12.dts" target/linux/mediatek/mt7981b-cmcc-rax3000m-nand.dts
        chmod +x target/linux/mediatek/dts/mt7981b-cmcc-rax3000m-nand.dts
        
        echo "mt7981b-cmcc-rax3000m-nand.dts"

    - name: 空间使用情况2
      if: ${{ !cancelled() }}
      run: df -hT

    - name: 编译工具链
      id: mtools
      run: |
        cd openwrt
        make defconfig
        echo -e "$(($(nproc)+1)) thread compile"
        make tools/compile -j$(($(nproc)+1)) || make tools/compile -j1 V=s
        make toolchain/compile -j$(($(nproc)+1)) || make toolchain/compile -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 空间使用情况3_1
      if: ${{ !cancelled() }}
      run: df -hT

    - name: 清除工具链编译中间产物...
      if: ${{ steps.mtools.outputs.status == 'success' && !cancelled() }}
      run: |
        cd openwrt
        rm -rf dl/*
        rm -rf build_dir/toolchain-*

    - name: 空间使用情况3_2
      if: ${{ !cancelled() }}
      run: df -hT

    - name: 编译内核
      id: mkernel
      if: ${{ steps.mtools.outputs.status == 'success' && !cancelled() }}
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make target/linux/compile -j$(($(nproc)+1)) || make target/linux/compile -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 空间使用情况4
      if: ${{ !cancelled() }}
      run: df -hT

    - name: 编译插件
      id: mpackage
      if: ${{ steps.mkernel.outputs.status == 'success' && !cancelled() }}
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make package/compile -j$(($(nproc)+1)) || make package/compile -j1 V=s
        make package/index
        make package/install -j$(nproc) || make package/install -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 空间使用情况5
      if: ${{ !cancelled() }}
      run: df -hT

    - name: 清除插件编译文件
      id: cpackage
      if: ${{ steps.mpackage.outputs.status == 'success' && !cancelled() }}
      run: |
        cd openwrt
        rm -rf build_dir/target-*/host
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 空间使用情况6
      if: ${{ !cancelled() }}
      run: df -hT

    - name: 编译固件
      id: compile
      if: ${{ steps.cpackage.outputs.status == 'success' && !cancelled() }}
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make target/install -j$(nproc) || make target/install -j1 V=s
        make json_overview_image_info
        make checksum
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 空间使用情况7
      if: ${{ !cancelled() }}
      run: df -hT

    - name: 上传 bin 目录
      uses: actions/upload-artifact@v4
      if: ${{ steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' }}
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件
      id: organize
      if: ${{ steps.compile.outputs.status == 'success' }}
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf *.buildinfo 
        rm -rf *.json 
        rm -rf *.manifest 
        rm -rf packages
        rm -rf *-kernel.bin
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 固件重命名
      if: ${{ steps.organize.outputs.status == 'success' }}
      shell: bash
      run: |
        cd openwrt/bin/targets/*/*
        for file in *mediatek-filogic-*.bin; do
          new_name=$(echo "$file" | sed 's/mediatek-filogic-//')
          mv -v "$file" "$new_name"
        done

    - name: 上传固件目录
      uses: actions/upload-artifact@v4
      if: ${{ env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled() }}
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: ${{ env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled() }}
      run: |
        echo -e "🎉 mediatek filogic平台\n✅ 主线源码\n❗️ ip地址 : 192.168.6.1" >> release.txt
        echo "release_tag=$(date +"%Y.%m.%d_MTK")" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到发布
      uses: softprops/action-gh-release@v2.0.4
      if: ${{ steps.tag.outputs.status == 'success' && !cancelled() }}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
